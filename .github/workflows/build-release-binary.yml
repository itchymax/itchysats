name: "Build release binary"

on:
  release:
    types: [created]

jobs:
  build_binaries:
    name: Build release binary
    strategy:
      matrix:
        include:
          - bin: taker
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: taker
            target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            archive_ext: tar
          - bin: taker
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: taker
            target: x86_64-apple-darwin
            os: macos-latest
            archive_ext: tar
          - bin: taker
            target: x86_64-pc-windows-msvc
            os: windows-latest
            archive_ext: zip
          - bin: maker
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: maker
            target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            archive_ext: tar
          - bin: maker
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: maker
            target: x86_64-apple-darwin
            os: macos-latest
            archive_ext: tar
          - bin: maker
            target: x86_64-pc-windows-msvc
            os: windows-latest
            archive_ext: zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout tagged commit
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.release.target_commitish }}
          token: ${{ secrets.ITCHY_GITHUB_TOKEN }}

      - name: Install toolchain from `rust-toolchain.toml`
        run: rustup show

      - uses: Swatinem/rust-cache@v1.3.0
        with:
          key: ${{ matrix.target }}

      - name: Install compiler for armhf arch
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf

      - name: Install compiler for aarch64 arch (armv8)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install 'gcc-aarch64-linux-gnu'

      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: yarn
          cache-dependency-path: '**/yarn.lock'

      - name: Build maker frontend
        if: matrix.bin == 'maker'
        shell: bash
        run: |
          cd maker-frontend;
          yarn
          APP=maker yarn build

      # Overwrite taker frontend with our new fancy UI
      - name: Build taker frontend
        if: matrix.bin == 'taker'
        shell: bash
        run: |
          cd taker-frontend;
          yarn
          yarn build

      - name: Build ${{ matrix.target }} ${{ matrix.bin }} release binary
        run: cargo build --target=${{ matrix.target }} --release --bin ${{ matrix.bin }}

      - name: Smoke test the binary
        # armv7-* and aarch64-* is only cross-compiled, no smoke test
        if: matrix.target != 'armv7-unknown-linux-gnueabihf' && matrix.target != 'aarch64-unknown-linux-gnu'
        run: target/${{ matrix.target }}/release/${{ matrix.bin }} --help

      # Remove once python 3 is the default
      - uses: actions/setup-python@v2.2.2
        with:
          python-version: '3.x'

      - id: create-archive-name
        shell: python # Use python to have a prettier name for the archive on Windows.
        run: |
          import platform
          os_info = platform.uname()

          arch = os_info.machine

          triple = "${{ matrix.target }}".split("-")
          arch = triple[0]

          archive_name=f'${{ matrix.bin }}_${{ github.event.release.tag_name }}_{os_info.system}_{arch}.${{ matrix.archive_ext }}'

          print(f'::set-output name=archive::{archive_name}')

      - name: Pack macos archive
        if: matrix.os == 'macos-latest'
        shell: bash
        run: gtar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack linux archive
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: tar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack windows archive
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.bin }}.exe ./${{ matrix.bin }}.exe
          7z a -tzip ${{ steps.create-archive-name.outputs.archive }} ./${{ matrix.bin }}.exe

      - name: Upload archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.ITCHY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.create-archive-name.outputs.archive }}
          asset_name: ${{ steps.create-archive-name.outputs.archive }}
          asset_content_type: application/gzip


  build_docker_image:
    needs: build_binaries
    name: Build docker images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: itchysats/itchysats/.github/workflows/release-docker
        with:
          release_tag: ${{ github.event.release.tag_name }}
